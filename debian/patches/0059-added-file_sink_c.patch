From 84249efbea6220fa193a3ce08c4be119545ce41b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marcus=20M=C3=BCller?= <marcus.mueller@ettus.com>
Date: Tue, 29 Dec 2015 19:08:14 +0100
Subject: [PATCH 059/131] added file_sink_c

---
 lib/file/CMakeLists.txt |   1 +
 lib/file/file_sink_c.cc | 226 ++++++++++++++++++++++++++++++++++++++++
 lib/file/file_sink_c.h  |  82 +++++++++++++++
 lib/sink_impl.cc        |  25 +++--
 4 files changed, 328 insertions(+), 6 deletions(-)
 create mode 100644 lib/file/file_sink_c.cc
 create mode 100644 lib/file/file_sink_c.h

diff --git a/lib/file/CMakeLists.txt b/lib/file/CMakeLists.txt
index 68ba004..6c55e85 100644
--- a/lib/file/CMakeLists.txt
+++ b/lib/file/CMakeLists.txt
@@ -27,6 +27,7 @@ include_directories(
 
 set(file_srcs
     ${CMAKE_CURRENT_SOURCE_DIR}/file_source_c.cc
+    ${CMAKE_CURRENT_SOURCE_DIR}/file_sink_c.cc
 )
 
 ########################################################################
diff --git a/lib/file/file_sink_c.cc b/lib/file/file_sink_c.cc
new file mode 100644
index 0000000..cf9a189
--- /dev/null
+++ b/lib/file/file_sink_c.cc
@@ -0,0 +1,226 @@
+/* -*- c++ -*- */
+/*
+ * Copyright 2012 Dimitri Stolnikov <horiz0n@gmx.net>
+ *
+ * GNU Radio is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3, or (at your option)
+ * any later version.
+ *
+ * GNU Radio is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with GNU Radio; see the file COPYING.  If not, write to
+ * the Free Software Foundation, Inc., 51 Franklin Street,
+ * Boston, MA 02110-1301, USA.
+ */
+
+#include <fstream>
+#include <string>
+#include <sstream>
+
+#include <boost/assign.hpp>
+#include <boost/format.hpp>
+
+#include <gnuradio/io_signature.h>
+
+#include "file_sink_c.h"
+
+#include "arg_helpers.h"
+
+using namespace boost::assign;
+
+file_sink_c_sptr make_file_sink_c(const std::string &args)
+{
+  return gnuradio::get_initial_sptr(new file_sink_c(args));
+}
+
+file_sink_c::file_sink_c(const std::string &args) :
+  gr::hier_block2("file_sink_c",
+                 gr::io_signature::make(1, 1, sizeof (gr_complex)),
+                 gr::io_signature::make(0, 0, 0))
+{
+  std::string filename;
+  bool append = false;
+  bool throttle = false;
+  _freq = 0;
+  _rate = 0;
+
+  dict_t dict = params_to_dict(args);
+
+  if (dict.count("file"))
+    filename = dict["file"];
+
+  if (dict.count("freq"))
+    _freq = boost::lexical_cast< double >( dict["freq"] );
+
+  if (dict.count("rate"))
+    _rate = boost::lexical_cast< double >( dict["rate"] );
+
+  if (dict.count("throttle"))
+    throttle = ("true" == dict["throttle"] ? true : false);
+
+  if (dict.count("append"))
+    append = ("true" == dict["append"] ? true : false);
+
+  if (!filename.length())
+    throw std::runtime_error("No file name specified.");
+
+  if (_freq < 0)
+    throw std::runtime_error("Parameter 'freq' may not be negative.");
+
+  if (0 == _rate && throttle)
+    throw std::runtime_error("Parameter 'rate' is missing in arguments.");
+
+  _file_rate = _rate;
+
+  _sink = gr::blocks::file_sink::make( sizeof(gr_complex),
+                                           filename.c_str(),
+                                           append);
+
+  _throttle = gr::blocks::throttle::make( sizeof(gr_complex), _file_rate );
+
+  if (throttle) {
+    connect( self(), 0, _throttle, 0 );
+    connect( _throttle, 0, _sink, 0 );
+  } else {
+    connect( self(), 0, _sink, 0 );
+  }
+}
+
+file_sink_c::~file_sink_c()
+{
+}
+
+std::string file_sink_c::name()
+{
+  return "IQ File sink";
+}
+
+std::vector<std::string> file_sink_c::get_devices( bool fake )
+{
+  std::vector<std::string> devices;
+
+  if ( fake )
+  {
+    std::string args = "file='/path/to/your/file'";
+    args += ",rate=1e6,freq=100e6,throttle=true";
+    args += ",label='Complex Sampled (IQ) File'";
+    devices.push_back( args );
+  }
+
+  return devices;
+}
+
+size_t file_sink_c::get_num_channels( void )
+{
+  return 1;
+}
+
+osmosdr::meta_range_t file_sink_c::get_sample_rates( void )
+{
+  osmosdr::meta_range_t range;
+
+  range += osmosdr::range_t( _file_rate , _file_rate); /* always return file's original rate */
+
+  return range;
+}
+
+double file_sink_c::set_sample_rate( double rate )
+{
+  if ( _file_rate != rate )
+  {
+    std::cerr << boost::format("WARNING: Overriding original sample rate of %g with %g")
+                 % _file_rate % rate
+              << std::endl;
+  }
+
+  _throttle->set_sample_rate( rate );
+
+  _rate = rate;
+
+  return get_sample_rate();
+}
+
+double file_sink_c::get_sample_rate( void )
+{
+  return _rate;
+}
+
+osmosdr::freq_range_t file_sink_c::get_freq_range( size_t chan )
+{
+  return osmosdr::freq_range_t(_freq, _freq);
+}
+
+double file_sink_c::set_center_freq( double freq, size_t chan )
+{
+  return get_center_freq(chan);
+}
+
+double file_sink_c::get_center_freq( size_t chan )
+{
+  return _freq;
+}
+
+double file_sink_c::set_freq_corr( double ppm, size_t chan )
+{
+  return get_freq_corr( chan );
+}
+
+double file_sink_c::get_freq_corr( size_t chan )
+{
+  return 0;
+}
+
+std::vector<std::string> file_sink_c::get_gain_names( size_t chan )
+{
+  return std::vector< std::string >();
+}
+
+osmosdr::gain_range_t file_sink_c::get_gain_range( size_t chan )
+{
+  return osmosdr::gain_range_t();
+}
+
+osmosdr::gain_range_t file_sink_c::get_gain_range( const std::string & name, size_t chan )
+{
+  return get_gain_range( chan );
+}
+
+double file_sink_c::set_gain( double gain, size_t chan )
+{
+  return get_gain(chan);
+}
+
+double file_sink_c::set_gain( double gain, const std::string & name, size_t chan )
+{
+  return set_gain(chan);
+}
+
+double file_sink_c::get_gain( size_t chan )
+{
+  return 0;
+}
+
+double file_sink_c::get_gain( const std::string & name, size_t chan )
+{
+  return get_gain(chan);
+}
+
+std::vector< std::string > file_sink_c::get_antennas( size_t chan )
+{
+  return std::vector< std::string >();
+}
+
+std::string file_sink_c::set_antenna( const std::string & antenna, size_t chan )
+{
+  return get_antenna(chan);
+}
+
+std::string file_sink_c::get_antenna( size_t chan )
+{
+  return "";
+}
diff --git a/lib/file/file_sink_c.h b/lib/file/file_sink_c.h
new file mode 100644
index 0000000..6e59451
--- /dev/null
+++ b/lib/file/file_sink_c.h
@@ -0,0 +1,82 @@
+/* -*- c++ -*- */
+/*
+ * Copyright 2012 Dimitri Stolnikov <horiz0n@gmx.net>
+ *
+ * GNU Radio is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3, or (at your option)
+ * any later version.
+ *
+ * GNU Radio is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with GNU Radio; see the file COPYING.  If not, write to
+ * the Free Software Foundation, Inc., 51 Franklin Street,
+ * Boston, MA 02110-1301, USA.
+ */
+#ifndef FILE_SINK_C_H
+#define FILE_SINK_C_H
+
+#include <gnuradio/hier_block2.h>
+#include <gnuradio/blocks/file_sink.h>
+#include <gnuradio/blocks/throttle.h>
+
+#include "sink_iface.h"
+
+class file_sink_c;
+
+typedef boost::shared_ptr< file_sink_c > file_sink_c_sptr;
+
+file_sink_c_sptr make_file_sink_c( const std::string & args = "" );
+
+class file_sink_c :
+    public gr::hier_block2,
+    public sink_iface
+{
+private:
+  friend file_sink_c_sptr make_file_sink_c(const std::string &args);
+
+  file_sink_c(const std::string &args);
+
+public:
+  ~file_sink_c();
+
+  std::string name();
+
+  static std::vector< std::string > get_devices( bool fake = false );
+
+  size_t get_num_channels( void );
+
+  osmosdr::meta_range_t get_sample_rates( void );
+  double set_sample_rate( double rate );
+  double get_sample_rate( void );
+
+  osmosdr::freq_range_t get_freq_range( size_t chan = 0 );
+  double set_center_freq( double freq, size_t chan = 0 );
+  double get_center_freq( size_t chan = 0 );
+  double set_freq_corr( double ppm, size_t chan = 0 );
+  double get_freq_corr( size_t chan = 0 );
+
+  std::vector<std::string> get_gain_names( size_t chan = 0 );
+  osmosdr::gain_range_t get_gain_range( size_t chan = 0 );
+  osmosdr::gain_range_t get_gain_range( const std::string & name, size_t chan = 0 );
+  double set_gain( double gain, size_t chan = 0 );
+  double set_gain( double gain, const std::string & name, size_t chan = 0 );
+  double get_gain( size_t chan = 0 );
+  double get_gain( const std::string & name, size_t chan = 0 );
+
+  std::vector< std::string > get_antennas( size_t chan = 0 );
+  std::string set_antenna( const std::string & antenna, size_t chan = 0 );
+  std::string get_antenna( size_t chan = 0 );
+
+private:
+  gr::blocks::file_sink::sptr _sink;
+  gr::blocks::throttle::sptr _throttle;
+  double _file_rate;
+  double _freq, _rate;
+};
+
+#endif // FILE_SINK_C_H
diff --git a/lib/sink_impl.cc b/lib/sink_impl.cc
index 146f1a9..f291b95 100644
--- a/lib/sink_impl.cc
+++ b/lib/sink_impl.cc
@@ -41,13 +41,14 @@
 #ifdef ENABLE_BLADERF
 #include "bladerf_sink_c.h"
 #endif
-
 #ifdef ENABLE_SOAPY
-#include <soapy_sink_c.h>
+#include "soapy_sink_c.h"
 #endif
-
 #ifdef ENABLE_REDPITAYA
-#include <redpitaya_sink_c.h>
+#include "redpitaya_sink_c.h"
+#endif
+#ifdef ENABLE_FILE
+#include "file_sink_c.h"
 #endif
 
 #include "arg_helpers.h"
@@ -98,6 +99,10 @@ sink_impl::sink_impl( const std::string &args )
 #ifdef ENABLE_REDPITAYA
   dev_types.push_back("redpitaya");
 #endif
+#ifdef ENABLE_FILE
+  dev_types.push_back("file");
+#endif
+
   std::cerr << "gr-osmosdr "
             << GR_OSMOSDR_VERSION << " (" << GR_OSMOSDR_LIBVER << ") "
             << "gnuradio " << gr::version() << std::endl;
@@ -140,6 +145,10 @@ sink_impl::sink_impl( const std::string &args )
     BOOST_FOREACH( std::string dev, redpitaya_sink_c::get_devices() )
       dev_list.push_back( dev );
 #endif
+#ifdef ENABLE_FILE
+    BOOST_FOREACH( std::string dev, file_sink_c::get_devices() )
+      dev_list.push_back( dev );
+#endif
 
 //    std::cerr << std::endl;
 //    BOOST_FOREACH( std::string dev, dev_list )
@@ -180,20 +189,24 @@ sink_impl::sink_impl( const std::string &args )
       block = sink; iface = sink.get();
     }
 #endif
-
 #ifdef ENABLE_SOAPY
     if ( dict.count("soapy") ) {
       soapy_sink_c_sptr sink = make_soapy_sink_c( arg );
       block = sink; iface = sink.get();
     }
 #endif
-
 #ifdef ENABLE_REDPITAYA
     if ( dict.count("redpitaya") ) {
       redpitaya_sink_c_sptr sink = make_redpitaya_sink_c( arg );
       block = sink; iface = sink.get();
     }
 #endif
+#ifdef ENABLE_FILE
+    if ( dict.count("file") ) {
+      file_sink_c_sptr sink = make_file_sink_c( arg );
+      block = sink; iface = sink.get();
+    }
+#endif
 
     if ( iface != NULL && long(block.get()) != 0 ) {
       _devs.push_back( iface );
-- 
2.20.1

